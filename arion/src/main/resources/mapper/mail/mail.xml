<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper
	namespace="com.arion.app.group.main.mail.mapper.MailMapper">

<!-- 받은 메일 조회 -->
<select id="receiveMailAll" parameterType="map" resultType="MailVO">
    SELECT * 
    FROM (
        SELECT mail_no, 
               sender_name,
               send_date,
               mail_title,
               ROWNUM AS rn
        FROM (
            SELECT DISTINCT m.mail_no, 
                   FIND_EMP_NAME(m.sender_id) AS sender_name,
                   m.send_date,
                   m.mail_title
            FROM mail m
            JOIN mail_receive mr ON m.mail_no = mr.mail_no
            WHERE mr.employee_id = #{mailVO.senderId} 
            AND mr.mail_status = 'RECEIVED'
            AND m.company_code = #{mailVO.companyCode}
            <if test="criteria.searchType != null and criteria.searchType != ''">
                <if test="criteria.searchType == 'mailtitle'">
                    AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
                </if>
                <if test="criteria.searchType == 'senderId'">
                    AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
                </if>
            </if>
            ORDER BY m.send_date DESC
        )
        WHERE ROWNUM <![CDATA[ <= ]]> #{criteria.pageNum} * #{criteria.amount}
    )
    WHERE rn > (#{criteria.pageNum} - 1) * #{criteria.amount}
</select>

<select id="selectMailTotalCount" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM mail m
    JOIN mail_receive mr ON m.mail_no = mr.mail_no
    WHERE mr.employee_id = #{mailVO.senderId}  <!-- 로그인한 사용자의 ID -->
    AND mr.mail_status = 'RECEIVED'
    AND m.company_code = #{mailVO.companyCode}
    <if test="criteria.searchType != null and criteria.searchType != ''">
        <if test="criteria.searchType == 'mailtitle'">
            AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
        </if>
        <if test="criteria.searchType == 'senderId'">
            AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
        </if>
    </if>
</select>

<!-- 보낸메일 -->
<select id="sendMailAll" parameterType="map" resultType="MailVO">
    SELECT * 
    FROM (
        SELECT ROWNUM AS rn, m.*, mr.employee_id AS receiver_id
        FROM mail m
        LEFT JOIN mail_receive mr ON m.mail_no = mr.mail_no
        WHERE m.sender_id = (
            SELECT employee_no
            FROM employees
            WHERE employee_id = #{mailVO.senderId}
        )
        AND m.mail_status = 'SEND'
        <if test="criteria.searchType != null and criteria.searchType != ''">
            <if test="criteria.searchType == 'mailtitle'">
                AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
            </if>
            <if test="criteria.searchType == 'senderId'">
                AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
            </if>
        </if>
        ORDER BY m.mail_no DESC
    )
    WHERE rn BETWEEN (#{criteria.pageNum} - 1) * #{criteria.amount} + 1 AND #{criteria.pageNum} * #{criteria.amount}
</select>

<select id="sendMailTotalCount" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM mail m
    WHERE m.sender_id = #{mailVO.senderId}  <!-- 문자열로 직접 비교 -->
    AND m.mail_status = 'SEND'
    <if test="criteria.searchType != null and criteria.searchType != ''">
        <if test="criteria.searchType == 'mailtitle'">
            AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
        </if>
        <if test="criteria.searchType == 'receiverId'">
            AND EXISTS (
                SELECT 1 
                FROM mail_receive mr 
                WHERE mr.mail_no = m.mail_no
                AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
            )
        </if>
    </if>
</select>
<!-- 중요 메일 조회 -->
<select id="importMailAll" parameterType="map" resultType="MailVO">
    SELECT * 
    FROM (
        SELECT mail_no, 
               sender_name,
               send_date,
               mail_title,
               ROWNUM AS rn
        FROM (
            SELECT DISTINCT m.mail_no, 
                   FIND_EMP_NAME(m.sender_id) AS sender_name,
                   m.send_date,
                   m.mail_title
            FROM mail m
            JOIN mail_receive mr ON m.mail_no = mr.mail_no
            WHERE mr.employee_id = #{mailVO.senderId} 
            AND mr.mail_status = 'IMPORT'
            AND m.company_code = #{mailVO.companyCode}
            <if test="criteria.searchType != null and criteria.searchType != ''">
                <if test="criteria.searchType == 'mailtitle'">
                    AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
                </if>
                <if test="criteria.searchType == 'senderId'">
                    AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
                </if>
            </if>
            ORDER BY m.send_date DESC
        )
        WHERE ROWNUM <![CDATA[ <= ]]> #{criteria.pageNum} * #{criteria.amount}
    )
    WHERE rn > (#{criteria.pageNum} - 1) * #{criteria.amount}
</select>

<!-- 중요 메일 총 개수 조회 -->
<select id="importMailTotalCount" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM mail m
    JOIN mail_receive mr ON m.mail_no = mr.mail_no
    WHERE mr.employee_id = #{mailVO.senderId}
    AND m.company_code = #{mailVO.companyCode}
    AND mr.mail_status = 'IMPORT' <!-- 중요 메일 필터링 -->
    <if test="criteria.searchType != null and criteria.searchType != ''">
        <if test="criteria.searchType == 'mailtitle'">
            AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
        </if>
        <if test="criteria.searchType == 'senderId'">
            AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
        </if>
    </if>
</select>


<!-- 휴지통 메일 조회 -->
<select id="deleteMailAll" parameterType="map" resultType="MailVO">
     SELECT * 
    FROM (
        SELECT mail_no, 
               sender_name,
               send_date,
               mail_title,
               ROWNUM AS rn
        FROM (
            SELECT DISTINCT m.mail_no, 
                   FIND_EMP_NAME(m.sender_id) AS sender_name,
                   m.send_date,
                   m.mail_title
            FROM mail m
            JOIN mail_receive mr ON m.mail_no = mr.mail_no
            WHERE mr.employee_id = #{mailVO.senderId} 
            AND mr.mail_status = 'TRASH'
            AND m.company_code = #{mailVO.companyCode}
            <if test="criteria.searchType != null and criteria.searchType != ''">
                <if test="criteria.searchType == 'mailtitle'">
                    AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
                </if>
                <if test="criteria.searchType == 'senderId'">
                    AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
                </if>
            </if>
            ORDER BY m.send_date DESC
        )
        WHERE ROWNUM <![CDATA[ <= ]]> #{criteria.pageNum} * #{criteria.amount}
    )
    WHERE rn > (#{criteria.pageNum} - 1) * #{criteria.amount}
</select>

<!-- 휴지통 메일 총 개수 조회 -->
<select id="deleteMailTotalCount" parameterType="map" resultType="int">
    SELECT COUNT(*)
    FROM mail m
    JOIN mail_receive mr ON m.mail_no = mr.mail_no
    WHERE mr.employee_id = #{mailVO.senderId}
    AND m.company_code = #{mailVO.companyCode}
    AND mr.mail_status = 'TRASH' <!-- 휴지통 상태 필터링 -->
    <if test="criteria.searchType != null and criteria.searchType != ''">
        <if test="criteria.searchType == 'mailtitle'">
            AND m.mail_title LIKE '%' || #{criteria.keyword} || '%'
        </if>
        <if test="criteria.searchType == 'senderId'">
            AND FIND_EMP_NAME(m.sender_id) LIKE '%' || #{criteria.keyword} || '%'
        </if>
    </if>
</select>

	<!-- 메일 상세 조회 -->
	<select id="selectMailInfo" parameterType="MailVO"
		resultType="MailVO">
    
    SELECT 
        e.employee_id AS sender_id,  <!-- sender_id를 employee_id로 변환 -->
        FIND_EMP_NAME(m.sender_id) AS sender_name,
        LISTAGG(mr.employee_id, ', ') WITHIN GROUP (ORDER BY mr.employee_id) AS receiver_ids,
        m.mail_title,
        m.mail_content,
        m.send_date,
        m.mail_no 
    FROM mail m
    JOIN mail_receive mr 
    ON m.mail_no = mr.mail_no
    JOIN employees e 
    ON m.sender_id = e.employee_no  <!-- employees 테이블과 조인하여 sender_id를 employee_id로 변환 -->
    WHERE m.mail_no = #{mailNo}
    GROUP BY 
        e.employee_id,  <!-- employee_id를 그룹화에 포함 -->
        FIND_EMP_NAME(m.sender_id),
        m.mail_title,
        m.mail_content,
        m.send_date,
        m.mail_no
	</select>


<!-- 메일 전송 -->
<insert id="sendMail" parameterType="MailVO">
	<selectKey keyProperty="mailNo" order="BEFORE" resultType="int">
		SELECT 	MAIL_NO_SEQ.NEXTVAL 
		  FROM DUAL
	</selectKey>
    INSERT INTO mail (
        mail_no,
        sender_id,
        mail_title,
        mail_content,
        mail_status,
        company_code
    ) VALUES (
        #{mailNo},
        #{senderId},
        #{mailTitle},
        #{mailContent},
        'SEND',
        #{companyCode}
    )
</insert>

    <!-- 메일 수신자 정보 추가 -->
    <insert id="insertMailReceive" parameterType="MailReceiveVO">
   
     <selectKey keyProperty="receiveNo" order="BEFORE" resultType="int">
     SELECT 	RECEIVE_NO_SEQ.NEXTVAL 
		  FROM DUAL
     </selectKey>
        INSERT INTO mail_receive (
            receive_no,
            mail_no,
            employee_id,
            mail_status,
            company_code
        ) VALUES (
            #{receiveNo},
            #{mailNo},
            #{employeeId},
            'RECEIVED',
            #{companyCode}
        )
    </insert>
    
    <insert id="replyToMail" parameterType="MailVO">
        <selectKey keyProperty="mailNo" order="BEFORE" resultType="int">
            SELECT MAIL_NO_SEQ.NEXTVAL FROM DUAL
        </selectKey>
        INSERT INTO mail (
            mail_no,
            sender_id,
            mail_title,
            mail_content,
            mail_status,
            company_code
        ) VALUES (
            #{mailNo},
            #{senderId},
            #{mailTitle},
            #{mailContent},
            'SEND', 
            #{companyCode}
        )
    </insert>
<!-- 수신메일 기준 삭제 -->
<select id="selectMailStatus" parameterType="map" resultType="String">
    SELECT mail_status
    FROM mail_receive
    WHERE mail_no = #{mailNo}
    AND employee_id = #{employeeId}
</select>

<!-- 수신메일 기준 상태변경 -->
<update id="updateMailStatus" parameterType="map">
    UPDATE mail_receive
    SET mail_status = #{status}
    WHERE mail_no IN
    <foreach collection="mailIds" item="mailNo" open="(" separator="," close=")">
        #{mailNo}
    </foreach>
    AND employee_id = #{employeeId}
   
</update>


 <!-- 보낸메일 기준 삭제 -->
    <select id="chooseMailStatus" parameterType="map" resultType="String">
    SELECT mail_status
    FROM mail
    WHERE mail_no = #{mailNo}
    AND sender_id IN (
        SELECT employee_no
        FROM employees
        WHERE company_code = #{companyCode}
        AND employee_no = #{empNo}
  		  );
</select>

    <!-- 메일 상태를 DELETE로 업데이트하는 쿼리 -->
    <update id="deleteMailStatus" parameterType="map">
        UPDATE mail
        SET mail_status = #{status}
        WHERE mail_no IN
        <foreach collection="mailIds" item="mailId" open="(" separator="," close=")">
            #{mailId}
        </foreach>
        AND sender_id = #{empNo}
    </update>
<!-- 수신메일 기준 상태변경 -->




</mapper>

